import os
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import time

# ---------------- –õ–æ–≥–∏ ----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ----------------
TOKEN = os.getenv("TELEGRAM_TOKEN")
RENDER_URL = "https://angel-camp.onrender.com"  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL

# ---------------- –ö–æ–º–∞–Ω–¥–∞ /start ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –ø—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å FastAPI.\n"
        "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –º–µ–Ω—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ - /start\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä"
    )
    await update.message.reply_text(welcome_text)

# ---------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ----------------
telegram_app = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    global telegram_app
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        telegram_app = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        telegram_app.add_handler(CommandHandler("start", start))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        await telegram_app.initialize()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        webhook_url = f"{RENDER_URL}/webhook"
        await telegram_app.bot.set_webhook(webhook_url)
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    
    yield
    
    # Shutdown
    if telegram_app:
        await telegram_app.shutdown()

# ---------------- FastAPI ----------------
app = FastAPI(lifespan=lifespan)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
last_request_time = 0

@app.post("/webhook")
async def webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    global last_request_time
    
    current_time = time.time()
    
    # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å–ø–∞–ª –±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç, —ç—Ç–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ
    if current_time - last_request_time > 600:
        logger.info("üîÑ –°–µ—Ä–≤–µ—Ä –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è...")
        # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è
        import asyncio
        await asyncio.sleep(2)
    
    last_request_time = current_time
    
    if telegram_app is None:
        logger.error("Telegram application not initialized")
        return {"status": "error", "message": "Application not initialized"}
    
    try:
        data = await request.json()
        update = Update.de_json(data, telegram_app.bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await telegram_app.process_update(update)
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id if update.effective_user else 'unknown'}")
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK —á—Ç–æ–±—ã Telegram –Ω–µ —Å—á–∏—Ç–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–Ω—ã–º
        return {"status": "error", "message": str(e)}

@app.get("/")
async def root():
    return {"message": "Telegram Bot is running!"}

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
