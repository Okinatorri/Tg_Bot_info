from flask import Flask, request, jsonify
import asyncio
import os
from aiogram import Bot, Dispatcher, types

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

app = Flask(__name__)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ë–µ—Ä–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π event loop
loop = asyncio.get_event_loop()


# –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message()
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render —á–µ—Ä–µ–∑ Webhook.")


# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    update = types.Update.model_validate(data)

    # feed_update –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ create_task, loop –∂–∏–≤–æ–π, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
    asyncio.create_task(dp.feed_update(bot, update))

    return jsonify({"status": "ok"}), 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
