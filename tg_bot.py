import os
import asyncio
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
import logging

# ---------------- –õ–æ–≥–∏ ----------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ----------------
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com/webhook

# ---------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----------------
bot = Bot(token=TOKEN)
dp = Dispatcher()
app = FastAPI()

# ---------------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------------
@dp.message()
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–∞ FastAPI –∏ Aiogram 3 üéâ")

@dp.message()
async def echo_handler(message: types.Message):
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
    await message.answer(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {message.text}")


# ---------------- FastAPI ----------------
@app.on_event("startup")
async def startup():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    await dp.startup()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.on_event("shutdown")
async def shutdown():
    await dp.shutdown()
    await bot.session.close()


@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ update —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    await dp.feed_update(bot, update)
    return {"status": "ok"}


# ---------------- –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ ----------------
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.environ.get("PORT", 8000)))
